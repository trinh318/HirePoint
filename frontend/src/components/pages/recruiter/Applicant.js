import React, { useEffect, useState } from 'react';
import { Link } from "react-router-dom";
import { FaBuilding, FaEye, FaUsers, FaTimes, FaEdit } from 'react-icons/fa';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faMapMarkerAlt, faClock } from "@fortawesome/free-solid-svg-icons";
import { faEllipsisV } from "@fortawesome/free-solid-svg-icons";
import { faHeart as solidHeart } from "@fortawesome/free-solid-svg-icons";
import { faHeart as regularHeart } from "@fortawesome/free-regular-svg-icons";
import { faChevronLeft, faChevronRight } from "@fortawesome/free-solid-svg-icons";
import '../../../styles/companyprofile.css';
import '../../../styles/jobrecruiment.css';
import { getId } from '../../../libs/isAuth';
import axios from 'axios';
import { FaBriefcase, FaMoneyCheckAlt, FaPeriscope, FaBookmark, FaMapMarkerAlt, FaPaperPlane, FaUserTie } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';

const Application = ({ jobId }) => {  // Destructure jobId t·ª´ props
    const [appliedProfiles, setAppliedProfile] = useState([]);
    const [job, setJob] = useState();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();
    const interviewer_id = getId();
    const [isOpen, setIsOpen] = useState(false);

    const fetchJobData = async () => {
        if (!jobId) {
            console.log('jobId is not valid:', jobId); // Khi jobId kh√¥ng h·ª£p l·ªá
            return;
        }

        try {
            setLoading(true);

            // Th·ª±c hi·ªán ƒë·ªìng th·ªùi c·∫£ hai y√™u c·∫ßu
            const [jobResponse, appliedProfileResponse] = await Promise.all([
                axios.get(`http://localhost:5000/api/jobs/${jobId}`),
                axios.get(`http://localhost:5000/api/profiles/applications/applied-profiles/${jobId}`, {
                    params: {
                        interviewer_id: interviewer_id
                    }
                })
            ]);

            // C·∫≠p nh·∫≠t d·ªØ li·ªáu
            setJob(jobResponse.data);
            setAppliedProfile(appliedProfileResponse.data); // Ch·ªânh ƒë√∫ng key theo d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
        } catch (error) {
            console.error('Error fetching data:', error);
            setError('Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y.'); // Th√¥ng b√°o l·ªói
        } finally {
            setLoading(false); // D·ª´ng tr·∫°ng th√°i loading
        }
    };

    useEffect(() => {
        fetchJobData();
        console.log(appliedProfiles);
    }, [jobId]);

    const handleViewProfile = (profileId) => {
        navigate(`/applicants/applicant-profile/${profileId}?jobId=${job._id}`)
    }

    const calculateRemainingDays = (deadline) => {
        if (!deadline) return 'kh√¥ng x√°c ƒë·ªãnh';
        const now = new Date();
        const deadlineDate = new Date(deadline);
        const diffTime = deadlineDate - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays > 0 ? diffDays : 'ƒë√£ h·∫øt h·∫°n';
    };

    const formatUpdateTime = (updateTime) => {
        if (!updateTime) return 'kh√¥ng r√µ';
        const now = new Date();
        const updatedDate = new Date(updateTime);
        const diffTime = now - updatedDate;
        const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        return diffDays > 0
            ? `${diffDays} ng√†y`
            : diffHours > 0
                ? `${diffHours} gi·ªù`
                : '0 gi√¢y';
    };

    const on = () => {
        console.log("profile", appliedProfiles);
    }

    //////////////////////////////////////////////////////// 
    const [isEditing, setIsEditing] = useState(false); // Hi·ªÉn th·ªã form
    const [editingData, setEditingData] = useState(null); // D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
    const handleEditClick = (profileId, time) => {
        console.log("time", time);
        setEditingData({
            profileId: profileId,
            idtime: time?.idTime,
            schedule: time?.time || '',
            location: time?.location || '',
            status: time?.status || '',
            notes: time?.note || '',
        });
        setIsEditing(true);

        console.log("time", editingData);

    };
    const handleCloseForm = () => {
        console.log(editingData.schedule, editingData.location, editingData.status, editingData.notes);
        setIsEditing(false);
        setEditingData(null);
    };
    const handleInputChange = (e) => {
        const { id, value } = e.target;
        setEditingData((prev) => ({ ...prev, [id]: value }));
    };

    const formatDateTimeLocal = (isoString) => {
        if (!isoString) return ''; // Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu kh√¥ng c√≥ gi√° tr·ªã
        const date = new Date(isoString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Th√™m 0 n·∫øu th√°ng < 10
        const day = String(date.getDate()).padStart(2, '0'); // Th√™m 0 n·∫øu ng√†y < 10
        const hours = String(date.getHours()).padStart(2, '0'); // Th√™m 0 n·∫øu gi·ªù < 10
        const minutes = String(date.getMinutes()).padStart(2, '0'); // Th√™m 0 n·∫øu ph√∫t < 10

        return `${year}-${month}-${day}T${hours}:${minutes}`;
    };

    const handleSave = async (e) => {
        e.preventDefault(); // NgƒÉn ch·∫∑n form submit m·∫∑c ƒë·ªãnh
        setLoading(true); // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
        setError(''); // X√≥a th√¥ng b√°o l·ªói tr∆∞·ªõc ƒë√≥

        const id = editingData.idtime;

        const payload = {
            start_time: editingData.schedule,
            location: editingData.location,
            status: editingData.status,
            notes: editingData.notes,
            jobId, // G·ª≠i jobId qua payload
        };

        try {
            // G·ª≠i y√™u c·∫ßu PUT ƒë·∫øn API
            const response = await axios.put(
                `http://localhost:5000/api/interviewschedule/update-schedule/${id}`,
                payload
            );

            // X·ª≠ l√Ω khi c·∫≠p nh·∫≠t th√†nh c√¥ng
            console.log('Update successful:', response.data);
            alert('L·ªãch ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
            setEditingData(null);
            // Th·ª±c hi·ªán c√°c thao t√°c sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
            setIsEditing(false); // ƒê√≥ng form ch·ªânh s·ª≠a
            await fetchJobData();
        } catch (error) {
            // X·ª≠ l√Ω l·ªói n·∫øu y√™u c·∫ßu th·∫•t b·∫°i
            console.error('Error updating schedule:', error);
            setError(error.response?.data?.message || 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t l·ªãch ph·ªèng v·∫•n.');
        } finally {
            setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
        }
    };

    if (loading) return <div>Loading...</div>
    if (error) return <div>{error}</div>

    return (
        <div className='company-profile'>
            <div className='company-profile'>
                {/* Ph·∫ßn ti√™u ƒë·ªÅ "C√¥ng ty c·ªßa t√¥i" */}
                <div className="company-profile-header">
                    <div className='column-application'>
                        <div className="company-detail-info-company-logo">
                            {/* Hi·ªÉn th·ªã logo c√¥ng ty n·∫øu c√≥ */}
                            <img
                                src={job.company_id?.logo || '/default-logo.png'}
                                alt="Company Logo"
                            />
                        </div>
                        <div className="company-detail-info-sections">
                            {/* T√™n c√¥ng vi·ªác */}
                            <Link to={`/jobs/jobdetail/${job._id}`} className="company-detail-info-position-title">
                                <h2>{job.title}</h2>
                            </Link>
                            {/* T√™n c√¥ng ty */}
                            <p className="company-detail-info-company-name">{job.company_id?.company_name || 'Kh√¥ng r√µ'}</p>
                            {/* M·ª©c l∆∞∆°ng */}
                            <span className="company-detail-info-salary">
                                {job.salary || 'Th·ªèa thu·∫≠n'}
                            </span>
                            <div className="company-detail-info-details">
                                {/* ƒê·ªãa ƒëi·ªÉm */}
                                <span className="company-detail-info-location">üìç {job.location || 'Kh√¥ng r√µ'}</span>
                                {/* Ng√†y c√≤n l·∫°i */}
                                <span className="company-detail-info-remaining-days">
                                    ‚è≥ C√≤n {calculateRemainingDays(job.application_deadline)} ng√†y ƒë·ªÉ ·ª©ng tuy·ªÉn
                                </span>
                            </div>
                            <p className="company-detail-info-update">
                                C·∫≠p nh·∫≠t {formatUpdateTime(job.updated_at)} tr∆∞·ªõc
                            </p>
                        </div>
                    </div>
                </div>
                <div className="company-profile-container">
                    <div className="user-management-table-container" style={{ margin: '0' }}>
                        <table>
                            <thead>
                                <tr>
                                    <th style={{ width: '35%' }}>Th√¥ng tin ·ª©ng vi√™n</th>
                                    <th style={{ width: '20%' }}>Th·ªùi gian ph·ªèng v·∫•n</th>
                                    <th style={{ width: '20%' }}>ƒê·ªãa ƒëi·ªÉm</th>
                                    <th style={{ width: '15%' }}>Tr·∫°ng th√°i</th>
                                    <th style={{ width: '10%' }}>Ghi ch√∫</th>
                                    <th>H√†nh ƒë·ªông</th>
                                </tr>
                            </thead>
                            <tbody>
                                {appliedProfiles?.length > 0 ? (
                                    appliedProfiles.map((applicant, index) => (
                                        <tr key={index} className="user-management-row">
                                            {/* C·ªôt th√¥ng tin ·ª©ng vi√™n */}
                                            <td style={{ width: '35%' }}>
                                                <div className='company-profile-info-left'>
                                                    <img
                                                        src={applicant.profile?.avatar || 'https://via.placeholder.com/150'}
                                                        className="company-profile-logo"
                                                        alt="Avatar"
                                                    />
                                                    <div className="company-profile-info">
                                                        <h4>{`${applicant.profile?.first_name} ${applicant.profile?.last_name}`}</h4>
                                                        <span>{`${applicant.profile?.current_industry} - ${applicant.profile?.current_field}`}</span>
                                                        <span>
                                                            <FaUserTie style={{ margin: "0 10px 0 0" }} /> {applicant.profile?.job_level}
                                                        </span>
                                                        <span className='find-applicant-row'>
                                                            <div>
                                                                <FaBriefcase style={{ margin: "0 10px 0 0" }} /> {`${applicant.profile?.years_of_experience || 0} nƒÉm`}
                                                            </div>
                                                            <div>
                                                                <FaMoneyCheckAlt style={{ margin: "0 10px 0 0" }} /> {`$${applicant.profile?.desired_salary || 0}`}
                                                            </div>
                                                        </span>
                                                        <span>
                                                            <FaMapMarkerAlt style={{ margin: "0 10px 0 0" }} /> {applicant.profile?.desired_work_location}
                                                        </span>
                                                    </div>
                                                </div>
                                            </td>

                                            {/* C·ªôt th·ªùi gian ph·ªèng v·∫•n */}
                                            <td style={{ width: '20%' }}>
                                                {applicant.interviews?.start_times?.map((time, timeIndex) => (
                                                    <div key={timeIndex} className="my-appointment-row-calender">
                                                        {new Date(time).toLocaleString()}
                                                    </div>
                                                )) || "Ch∆∞a l√™n l·ªãch"}
                                            </td>

                                            {/* C·ªôt ƒë·ªãa ƒëi·ªÉm ph·ªèng v·∫•n */}
                                            <td style={{ width: '20%' }}>
                                                {applicant.interviews?.locations?.join(', ') || "Ch∆∞a x√°c ƒë·ªãnh"}
                                            </td>

                                            {/* C·ªôt tr·∫°ng th√°i */}
                                            <td style={{ width: '15%' }}>
                                                {applicant.interviews?.statuses?.join(', ') || "ƒêang ch·ªù x·ª≠ l√Ω"}
                                            </td>

                                            {/* C·ªôt ghi ch√∫ */}
                                            <td style={{ width: '10%' }}>
                                                {applicant.interviews?.notes?.join('; ') || "Kh√¥ng c√≥ ghi ch√∫"}
                                            </td>

                                            {/* C·ªôt h√†nh ƒë·ªông */}
                                            <td>
                                                <button
                                                    className="user-info-edit-btn"
                                                    onClick={() => handleEditClick(applicant.profile?._id, applicant.interviews)}
                                                >
                                                    <FaEdit />
                                                </button>
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan="6" style={{ textAlign: 'center' }}>
                                            Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ·ª©ng tuy·ªÉn.
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>

                    </div>
                </div>
            </div >
            {isEditing && (
                <>
                    <div className="user-info-edit-overlay">
                        <div className="user-info-edit-container" style={{ height: '45%' }}>
                            {/* N·ªôi dung Form */}
                            <form className="user-info-edit-form">
                                <div className="user-info-edit-col">
                                    <div className="user-info-edit-row">
                                        <label htmlFor="schedule" className="user-info-edit-label">
                                            L·ªãch ph·ªèng v·∫•n
                                        </label>
                                        <input
                                            id="schedule"
                                            type="datetime-local"
                                            value={formatDateTimeLocal(editingData?.schedule) || ''} // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng
                                            className="create-appointment-input"
                                            onChange={(e) => setEditingData((prev) => ({ ...prev, schedule: e.target.value }))}
                                        />

                                    </div>
                                    <div className="user-info-edit-row">
                                        <label htmlFor="location" className="user-info-edit-label">
                                            ƒê·ªãa ƒëi·ªÉm ph·ªèng v·∫•n <span className="user-info-edit-required">*</span>
                                        </label>
                                        <input
                                            type="text"
                                            id="location"
                                            value={editingData?.location}
                                            className="user-info-edit-input"
                                            onChange={handleInputChange}
                                        />
                                    </div>
                                </div>
                                <div className="user-info-edit-col">
                                    <div className="user-info-edit-row">
                                        <label htmlFor="status" className="user-info-edit-label">
                                            Tr·∫°ng th√°i <span className="user-info-edit-required">*</span>
                                        </label>
                                        <select
                                            id="status"
                                            value={editingData?.status || ''}
                                            className="user-info-edit-select"
                                            onChange={handleInputChange}
                                        >
                                            <option>Tr·∫°ng th√°i</option>
                                            <option value="available">ƒêang xem x√©t</option>
                                            <option value="Ch·ªù ph√™ duy·ªát">Ch·ªù ph√™ duy·ªát</option>
                                            <option value="ƒêang ƒë·ª£i ph·ªèng v·∫•n">Ch·ªù ph·ªèng v·∫•n</option>
                                            <option value="ƒê√£ ph·ªèng v·∫•n">ƒê√£ ph·ªèng v·∫•n</option>
                                            <option value="H·ªßy">H·ªßy</option>
                                        </select>
                                    </div>
                                    <div className="user-info-edit-row">
                                        <label htmlFor="notes" className="user-info-edit-label">
                                            Ghi ch√∫ <span className="user-info-edit-required">*</span>
                                        </label>
                                        <input
                                            type="text"
                                            id="notes"
                                            value={editingData?.notes}
                                            onChange={handleInputChange}
                                            className="user-info-edit-input"
                                        />
                                    </div>
                                </div>
                            </form>
                            {/* Footer (Save/Cancel) */}
                            <div className="user-info-edit-button-row">
                                <button onClick={(event) => handleSave(event)} className="user-info-edit-save-btn" type="submit">
                                    L∆∞u
                                </button>
                                <button className="user-info-edit-cancel-btn" type="button" onClick={handleCloseForm}>
                                    H·ªßy
                                </button>
                            </div>
                        </div>
                    </div>
                </>
            )}
        </div >
    )
}

export default Application;